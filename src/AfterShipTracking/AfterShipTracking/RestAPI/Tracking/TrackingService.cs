/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
using System;
using System.Net.Http;

namespace AfterShipTracking
{
    public class TrackingService : BaseResourceService
    {
        IHttpClient HttpClient;

        public TrackingService(IHttpClient httpClient)
        {
            this.HttpClient = httpClient;
        }

        public Tracking CreateTracking(CreateTrackingOptions? options = null)
        {
            string path = $"/tracking/2024-04/trackings";
            Request request = new Request(HttpMethod.Post, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new CreateTrackingAdapter());
        }

        public PartialUpdateTracking RetrackTrackingById(
            string id,
            RetrackTrackingByIdOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{id}/retrack";
            if (string.IsNullOrEmpty(id))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `id` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Post, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new RetrackTrackingByIdAdapter());
        }

        public Tracking MarkTrackingCompletedBySlugTrackingNumber(
            string slug,
            string trackingNumber,
            MarkTrackingCompletedBySlugTrackingNumberOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}/mark-as-completed";
            if (string.IsNullOrEmpty(slug))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `slug` is invalid"
                );
            }
            if (string.IsNullOrEmpty(trackingNumber))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `tracking_number` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Post, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(
                response,
                new MarkTrackingCompletedBySlugTrackingNumberAdapter()
            );
        }

        public GetTrackingsResponseTrackingListData GetTrackings(
            GetTrackingsOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings";
            Request request = new Request(HttpMethod.Get, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new GetTrackingsAdapter());
        }

        public Tracking GetTrackingById(string id, GetTrackingByIdOptions? options = null)
        {
            string path = $"/tracking/2024-04/trackings/{id}";
            if (string.IsNullOrEmpty(id))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `id` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Get, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new GetTrackingByIdAdapter());
        }

        public Tracking UpdateTrackingById(string id, UpdateTrackingByIdOptions? options = null)
        {
            string path = $"/tracking/2024-04/trackings/{id}";
            if (string.IsNullOrEmpty(id))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `id` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Put, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new UpdateTrackingByIdAdapter());
        }

        public PartialDeleteTracking DeleteTrackingById(
            string id,
            DeleteTrackingByIdOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{id}";
            if (string.IsNullOrEmpty(id))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `id` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Delete, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new DeleteTrackingByIdAdapter());
        }

        public Tracking GetTrackingBySlugTrackingNumber(
            string slug,
            string trackingNumber,
            GetTrackingBySlugTrackingNumberOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
            if (string.IsNullOrEmpty(slug))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `slug` is invalid"
                );
            }
            if (string.IsNullOrEmpty(trackingNumber))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `tracking_number` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Get, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new GetTrackingBySlugTrackingNumberAdapter());
        }

        public Tracking UpdateTrackingBySlugTrackingNumber(
            string slug,
            string trackingNumber,
            UpdateTrackingBySlugTrackingNumberOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
            if (string.IsNullOrEmpty(slug))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `slug` is invalid"
                );
            }
            if (string.IsNullOrEmpty(trackingNumber))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `tracking_number` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Put, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new UpdateTrackingBySlugTrackingNumberAdapter());
        }

        public Tracking MarkTrackingCompletedById(
            string id,
            MarkTrackingCompletedByIdOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{id}/mark-as-completed";
            if (string.IsNullOrEmpty(id))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `id` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Post, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new MarkTrackingCompletedByIdAdapter());
        }

        public PartialDeleteTracking DeleteTrackingBySlugTrackingNumber(
            string slug,
            string trackingNumber,
            DeleteTrackingBySlugTrackingNumberOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
            if (string.IsNullOrEmpty(slug))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `slug` is invalid"
                );
            }
            if (string.IsNullOrEmpty(trackingNumber))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `tracking_number` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Delete, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new DeleteTrackingBySlugTrackingNumberAdapter());
        }

        public PartialUpdateTracking RetrackTrackingBySlugTrackingNumber(
            string slug,
            string trackingNumber,
            RetrackTrackingBySlugTrackingNumberOptions? options = null
        )
        {
            string path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}/retrack";
            if (string.IsNullOrEmpty(slug))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `slug` is invalid"
                );
            }
            if (string.IsNullOrEmpty(trackingNumber))
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.REQUEST_ERROR,
                    "request error" + ": `tracking_number` is invalid"
                );
            }
            Request request = new Request(HttpMethod.Post, path, options);

            var response = this.HttpClient.MakeRequest(request);
            return ProcessResponseData(response, new RetrackTrackingBySlugTrackingNumberAdapter());
        }
    }
}
