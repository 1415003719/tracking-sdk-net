/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */

using System.Net.Http;

namespace Tracking;

public class LastCheckpointService : BaseResourceService
{
    private readonly IHttpClient HttpClient;

    public LastCheckpointService(IHttpClient httpClient)
    {
        HttpClient = httpClient;
    }

    public GetCheckpointByTrackingIdResponse GetCheckpointByTrackingId(string trackingId,
        GetCheckpointByTrackingIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/last_checkpoint/{trackingId}";
        if (string.IsNullOrEmpty(trackingId))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_id` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessData<GetCheckpointByTrackingIdResponse>(response);
    }

    public GetCheckpointBySlugTrackingNumberResponse GetCheckpointBySlugTrackingNumber(string slug,
        string trackingNumber, GetCheckpointBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/last_checkpoint/{slug}/{trackingNumber}";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessData<GetCheckpointBySlugTrackingNumberResponse>(response);
    }
}