/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */

using System.Net.Http;

namespace Tracking;

public class TrackingService : BaseResourceService
{
    private readonly IHttpClient HttpClient;

    public TrackingService(IHttpClient httpClient)
    {
        HttpClient = httpClient;
    }

    public Tracking MarkTrackingCompletedBySlugTrackingNumber(string slug, string trackingNumber,
        MarkTrackingCompletedBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}/mark-as-completed";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new MarkTrackingCompletedBySlugTrackingNumberAdapter());
    }

    public PartialDeleteTracking DeleteTrackingById(string id, DeleteTrackingByIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{id}";
        if (string.IsNullOrEmpty(id))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `id` is invalid");
        var request = new Request(
            HttpMethod.Delete,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new DeleteTrackingByIdAdapter());
    }

    public Tracking MarkTrackingCompletedById(string id, MarkTrackingCompletedByIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{id}/mark-as-completed";
        if (string.IsNullOrEmpty(id))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `id` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new MarkTrackingCompletedByIdAdapter());
    }

    public Tracking GetTrackingBySlugTrackingNumber(string slug, string trackingNumber,
        GetTrackingBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new GetTrackingBySlugTrackingNumberAdapter());
    }

    public Tracking CreateTracking(CreateTrackingOptions? options = null)
    {
        var path = "/tracking/2024-04/trackings";
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new CreateTrackingAdapter());
    }

    public Tracking GetTrackingById(string id, GetTrackingByIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{id}";
        if (string.IsNullOrEmpty(id))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `id` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new GetTrackingByIdAdapter());
    }

    public GetTrackingsResponseTrackingListData GetTrackings(GetTrackingsOptions? options = null)
    {
        var path = "/tracking/2024-04/trackings";
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new GetTrackingsAdapter());
    }

    public PartialUpdateTracking RetrackTrackingById(string id, RetrackTrackingByIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{id}/retrack";
        if (string.IsNullOrEmpty(id))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `id` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new RetrackTrackingByIdAdapter());
    }

    public Tracking UpdateTrackingBySlugTrackingNumber(string slug, string trackingNumber,
        UpdateTrackingBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Put,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new UpdateTrackingBySlugTrackingNumberAdapter());
    }

    public PartialDeleteTracking DeleteTrackingBySlugTrackingNumber(string slug, string trackingNumber,
        DeleteTrackingBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Delete,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new DeleteTrackingBySlugTrackingNumberAdapter());
    }

    public PartialUpdateTracking RetrackTrackingBySlugTrackingNumber(string slug, string trackingNumber,
        RetrackTrackingBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{slug}/{trackingNumber}/retrack";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new RetrackTrackingBySlugTrackingNumberAdapter());
    }

    public Tracking UpdateTrackingById(string id, UpdateTrackingByIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/trackings/{id}";
        if (string.IsNullOrEmpty(id))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `id` is invalid");
        var request = new Request(
            HttpMethod.Put,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new UpdateTrackingByIdAdapter());
    }
}