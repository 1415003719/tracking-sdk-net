/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */

using System.Net.Http;

namespace Tracking;

public class NotificationService : BaseResourceService
{
    private readonly IHttpClient HttpClient;

    public NotificationService(IHttpClient httpClient)
    {
        HttpClient = httpClient;
    }

    public Notification GetNotificationByTrackingId(string trackingId,
        GetNotificationByTrackingIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{trackingId}";
        if (string.IsNullOrEmpty(trackingId))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_id` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new GetNotificationByTrackingIdAdapter());
    }

    public Notification GetNotificationBySlugTrackingNumber(string slug, string trackingNumber,
        GetNotificationBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{slug}/{trackingNumber}";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Get,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new GetNotificationBySlugTrackingNumberAdapter());
    }

    public Notification AddNotificationByTrackingId(string trackingId,
        AddNotificationByTrackingIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{trackingId}/add";
        if (string.IsNullOrEmpty(trackingId))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_id` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new AddNotificationByTrackingIdAdapter());
    }

    public Notification DeleteNotificationByTrackingId(string trackingId,
        DeleteNotificationByTrackingIdOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{trackingId}/remove";
        if (string.IsNullOrEmpty(trackingId))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_id` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new DeleteNotificationByTrackingIdAdapter());
    }

    public Notification AddNotificationBySlugTrackingNumber(string slug, string trackingNumber,
        AddNotificationBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{slug}/{trackingNumber}/add";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new AddNotificationBySlugTrackingNumberAdapter());
    }

    public Notification DeleteNotificationBySlugTrackingNumber(string slug, string trackingNumber,
        DeleteNotificationBySlugTrackingNumberOptions? options = null)
    {
        var path = $"/tracking/2024-04/notifications/{slug}/{trackingNumber}/remove";
        if (string.IsNullOrEmpty(slug))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `slug` is invalid");
        if (string.IsNullOrEmpty(trackingNumber))
            throw ErrorCode.GenSDKError(ErrorCode.REQUEST_ERROR, "request error" + ": `tracking_number` is invalid");
        var request = new Request(
            HttpMethod.Post,
            path,
            options
        );

        var response = HttpClient.MakeRequest(request);
        return ProcessResponseData(response, new DeleteNotificationBySlugTrackingNumberAdapter());
    }
}