/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */

using System.Linq;

namespace Tracking;

public class AfterShipClient
{
    /// <summary>
    ///     Custom API domain.
    /// </summary>
    public string Domain;

    public AfterShipClient(
        string domain = null,
        string apiKey = null,
        string apiSecret = null,
        string authenticationType = null,
        string userAgent = null,
        string proxy = null,
        int timeout = 0,
        int maxRetry = 0,
        IHttpClient httpClient = null
    )
    {
        Domain = domain ?? AfterShipConfiguration.Domain;
        ApiBase = Domain;
        MaxRetry = maxRetry == 0 ? AfterShipConfiguration.MaxRetry : maxRetry;
        Timeout = timeout == 0 ? AfterShipConfiguration.Timeout : timeout;
        UserAgent = userAgent ?? AfterShipConfiguration.UserAgent;
        Proxy = proxy ?? AfterShipConfiguration.Proxy;
        ApiKey = apiKey ?? AfterShipConfiguration.ApiKey;
        ApiSecret = apiSecret ?? AfterShipConfiguration.ApiSecret;
        AuthenticationType = authenticationType ?? AfterShipConfiguration.AuthenticationType;

        CheckConfig();

        var authenticator = new Authenticator(ApiKey, ApiSecret, AuthenticationType);

        HttpClient = httpClient ?? new SystemNetHttpClient(ApiBase, authenticator, MaxRetry, Timeout, UserAgent, Proxy);

        Tracking = new TrackingService(HttpClient);
        EstimatedDeliveryDate = new EstimatedDeliveryDateService(HttpClient);
        Courier = new CourierService(HttpClient);
        LastCheckpoint = new LastCheckpointService(HttpClient);
        Notification = new NotificationService(HttpClient);
    }

    /// <summary>Gets the base URL for AfterShip's API.</summary>
    /// <value>The base URL for AfterShip's API.</value>
    public string ApiBase { get; set; }

    /// <summary>
    ///     Custom API domain.
    /// </summary>
    public int MaxRetry { get; set; }

    /// <summary>
    ///     Max request timeout in milliseconds.
    /// </summary>
    public int Timeout { get; set; }

    /// <summary>
    ///     Custom API domain.
    /// </summary>
    public string UserAgent { get; set; }

    /// <summary>
    ///     Custom API domain. Only http, socks4, socks4a, socks5 are allowed.
    /// </summary>
    public string Proxy { get; set; }

    /// <summary>
    ///     Custom API domain.
    /// </summary>
    public string ApiKey { get; set; }

    /// <summary>
    ///     AfterShip API secret for AES or RSA authentication method.
    /// </summary>
    public string ApiSecret { get; set; }

    /// <summary>
    ///     AfterShip API Authentication method. Allowed value: API_KEY , AES , RSA
    /// </summary>
    public string AuthenticationType { get; set; }

    /// <summary>
    ///     AfterShip API version.
    /// </summary>
    public string Version { get; set; }

    /// <summary>
    ///     AfterShip API Product
    /// </summary>
    public string Product { get; set; }

    public IHttpClient HttpClient { get; }

    public TrackingService Tracking { get; set; }
    public EstimatedDeliveryDateService EstimatedDeliveryDate { get; set; }
    public CourierService Courier { get; set; }
    public LastCheckpointService LastCheckpoint { get; set; }
    public NotificationService Notification { get; set; }

    private void CheckConfig()
    {
        if (string.IsNullOrEmpty(ApiKey))
            throw ErrorCode.GenSDKError(ErrorCode.INVALID_API_KEY, "apiKey cannot be empty");

        if (Timeout < 0 || Timeout > 30000)
            throw ErrorCode.GenSDKError(ErrorCode.INVALID_OPTION,
                "timeout invalid, timeout must between 0 and 30000 (milliseconds)");

        if (MaxRetry < 0 || MaxRetry > 10)
            throw ErrorCode.GenSDKError(ErrorCode.INVALID_OPTION, "max retry invalid, max retry must between 0 and 10");

        string[] array =
        {
            AfterShipConfiguration.AUTHENTICATION_TYPE_API_KEY,
            AfterShipConfiguration.AUTHENTICATION_TYPE_AES,
            AfterShipConfiguration.AUTHENTICATION_TYPE_RSA
        };
        var authenticationType = AuthenticationType;
        if (!array.Contains(authenticationType))
            throw ErrorCode.GenSDKError(ErrorCode.INVALID_OPTION,
                "Invalid option: authenticationType should be one of API_KEY, AES, RSA");

        if (authenticationType == AfterShipConfiguration.AUTHENTICATION_TYPE_AES ||
            authenticationType == AfterShipConfiguration.AUTHENTICATION_TYPE_AES)
            if (string.IsNullOrEmpty(ApiSecret))
                throw ErrorCode.GenSDKError(ErrorCode.INVALID_API_KEY, "Invalid option: apiSecret cannot be empty");
    }
}