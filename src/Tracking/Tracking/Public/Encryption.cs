/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */

using System;
using System.Security.Cryptography;
using System.Text;

namespace Tracking;

public class Encryption
{
    public static string MD5Encode(string input)
    {
        using var md5 = MD5.Create();
        // Convert the input string to a byte array and compute the hash
        var inputBytes = Encoding.UTF8.GetBytes(input);
        var hashBytes = md5.ComputeHash(inputBytes);

        // Convert the byte array to a hexadecimal string
        var sb = new StringBuilder();
        for (var i = 0; i < hashBytes.Length; i++) sb.Append(hashBytes[i].ToString("X2"));
        return sb.ToString();
    }

    public static string HmacSha256Encrypt(string signString, string secretKey)
    {
        var keyBytes = Encoding.UTF8.GetBytes(secretKey);
        var messageBytes = Encoding.UTF8.GetBytes(signString);

        using (var hmac = new HMACSHA256(keyBytes))
        {
            var hashBytes = hmac.ComputeHash(messageBytes);
            return Convert.ToBase64String(hashBytes);
        }
    }

    public static string RsaPssSha256Encrypt(string data, string privateKeyPem)
    {
        var dataBytes = Encoding.UTF8.GetBytes(data);

        using (var rsa = RSA.Create())
        {
            rsa.ImportFromPem(privateKeyPem);

            // sign data with SHA256
            var signature = rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pss);

            // convert to Base64 string
            var base64Signature = Convert.ToBase64String(signature);

            return base64Signature;
        }
    }
}